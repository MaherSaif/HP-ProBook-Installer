#Maintained by: RehabMan for: HP Probook 4x30s/4x40s
# 12_Brightness.txt

#
# This patch is to use ACPIBacklight.kext instead of the native
# backlight control.  With it you can have more control over
# the range of brightness.
#
# Note: This patch and ACPIBacklight is a work-in-progress.
#

into device label IGPU code_regex (OperationRegion\s\(IGD2,\sPCI_Config[^\}]*\}) remove_matched;
into device label IGPU code_regex (OperationRegion\s\(IGDP,\sPCI_Config[^\}]*\}) replace_matched
begin
%1\n
OperationRegion (IGD2, PCI_Config, 0x10, 4)\n
Field (IGD2, AnyAcc, NoLock, Preserve)\n
{\n
	BAR1,32,\n
}\n
end;

into device label PNLF remove_entry;
into scope label \_SB insert
begin
Device (PNLF)\n
{\n
    // normal PNLF declares (note some of this probably not necessary)\n
    Name (_HID, EisaId ("APP0002"))\n
    Name (_CID, "backlight")\n
    Name (_UID, 10)\n
    Name (_STA, 0x0B)\n
    //define hardware register access for brightness\n
    // you can see BAR1 value in RW-Everything under Bus00,02 Intel VGA controler PCI\n
    OperationRegion (BRIT, SystemMemory, \_SB.PCI0.IGPU.BAR1, 0xc8254)\n
    Field (BRIT, AnyAcc, Lock, Preserve)\n
    {\n
        Offset(0x4824c),\n
        LEV2, 32,\n
        LEVL, 32,\n
        Offset(0x7003C),\n
        P0BL, 32,\n
        Offset(0xc824c),\n
        LEVW, 32,\n
        LEVX, 32,\n
    }\n
    // DEB1 special for setting KLVX at runtime...\n
    //Method (DEB1, 1, NotSerialized)\n
    //{\n
    //    Store(Arg0, KLVX)\n
    //}\n
    // _INI deals with differences between native setting and desired\n
    Method (_INI, 0, NotSerialized)\n
    {\n
        Store(ShiftRight(KLVX,16), Local0)\n
        Store(ShiftRight(LEVX,16), Local1)\n
        if (LNotEqual(Local0, Local1))\n
        {\n
            Divide(Multiply(LEVL, Local0), Local1,, Local0)\n
            //Store(P0BL, Local1)\n
            //While(LEqual (P0BL, Local1)) {}\n
            Store(Local0, LEVL)\n
            Store(KLVX, LEVX)\n
        }\n
    }\n
    // _BCM/_BQC: set/get for brightness level\n
    Method (_BCM, 1, NotSerialized)\n
    {\n
        // initialize for consistent backlight level before/after sleep\n
        If (LNotEqual(LEVW, 0x80000000)) { Store (0x80000000, LEVW) }\n
    	If (LNotEqual(LEVX, KLVX)) { Store (KLVX, LEVX) }\n
        // store new backlight level\n
        Store(Match(_BCL, MGE, Arg0, MTR, 0, 2), Local0)\n
        If (LEqual(Local0, Ones)) { Subtract(SizeOf(_BCL), 1, Local0) }\n
        If (LNotEqual(LEV2, 0x80000000)) { Store(0x80000000, LEV2) }\n
        Store(DerefOf(Index(_BCL, Local0)), LEVL)\n
    }\n
    Method (_BQC, 0, NotSerialized)\n
    {\n
        Store(Match(_BCL, MGE, LEVL, MTR, 0, 2), Local0)\n
        If (LEqual(Local0, Ones)) { Subtract(SizeOf(_BCL), 1, Local0) }\n
        Return(DerefOf(Index(_BCL, Local0)))\n
    }\n
    Method (_DOS, 1, NotSerialized)\n
    {\n
        ^^PCI0.IGPU._DOS(Arg0)\n
    }\n
    // extended _BCM/_BQC for setting "in between" levels\n
    Method (XBCM, 1, NotSerialized)\n
    {\n
        // initialize for consistent backlight level before/after sleep\n
        If (LNotEqual(LEVW, 0x80000000)) { Store (0x80000000, LEVW) }\n
    	If (LNotEqual(LEVX, KLVX)) { Store (KLVX, LEVX) }\n
        // store new backlight level\n
        If (LGreater(Arg0, XRGH)) { Store(XRGH, Arg0) }\n
        If (LAnd(Arg0, LLess(Arg0, XRGL))) { Store(XRGL, Arg0) }\n
        If (LNotEqual(LEV2, 0x80000000)) { Store(0x80000000, LEV2) } \n
        Store(Arg0, LEVL)\n
    }\n
    Method (XBQC, 0, NotSerialized)\n
    {\n
        Store(LEVL, Local0)\n
        If (LGreater(Local0, XRGH)) { Store(XRGH, Local0) }\n
        If (LAnd(Local0, LLess(Local0, XRGL))) { Store(XRGL, Local0) }\n
        Return(Local0)\n
    }\n
}\n
end;

